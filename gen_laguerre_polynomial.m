 function gen_laguerre_values = gen_laguerre_polynomial(order, nodes_x, alpha, beta, shift)


% gen_laguerre_values=gen_laguerre_polynomial(polynomial_order,nodes_x,alpha,shift, beta)
% This function gives values of gen_laguerre_polynomial 
%         of POLYNOMIAL_ORDER at NODES_X 
% by the three-term recurrence relationship:
%

% When beta=1, shift=0, the functions satisfy the following differential equation:
%
%      X * Y'' + (ALPHA+1-X) * Y' + N * Y = 0
%
%    Function values can be generated by the recursion:
%
%     gen_laguerre_polynomial(0,X,ALPHA) = 1
%     gen_laguerre_polynomial(1,X,ALPHA) = 1+ALPHA-X
%
%     gen_laguerre_polynomial(N,X,ALPHA) = ( (2*N-1+ALPHA-X) * gen_laguerre_polynomial(N-1,X,ALPHA)
%                          - (N-1+ALPHA) * gen_laguerre_polynomial(N-2,X,ALPHA)) / N
%
% The three-term recurrence relationship for ALPHA>-1 and BETA>0 is 
%  X = X -shift;
%  gen_laguerre_polynomial(0,X,ALPHA,beta) = 1
%  gen_laguerre_polynomial(1,X,ALPHA,beta) = (1+ALPHA)-beta*X
%
%  gen_laguerre_polynomial(N,X,ALPHA) = ( (2*N-1+ALPHA-beta*X) * gen_laguerre_polynomial(N-1,X,ALPHA,beta)
%                     - (N-1+ALPHA) * gen_laguerre_polynomial(N-2,X,ALPHA,beta)) / N                


% INPUT
%
% order   -- the maximum order of generalized Laguerre polynomials
% nodes_x -- points on (shift, +oo]
% alpha  -- as in  the weight x^alpha*e^(-beta(x-shift)); Default value 0, in (-1, +oo)
% shift  -- as in  the weight x^alpha*e^(-beta(x-shift)); Default value 0, in (-oo, +oo)
% beta   -- as in  the weight x^alpha*e^(-beta(x-shift)); Default value 1, in (-oo, +oo)


%
% OUTPUT
%  gen_Laguerre_values(M,1:ORDER+1)   --- the values of the first
%    ORDER generalized Laguerre polynomials at NODES_x
%
%  RESTRICTIONS:
%
%    ALPHA> -1,  BETA>0
%
%  NORM:
%
%    INTEGRAL ( 0<= X < +OO ) X^ALPHA * EXP(-BETA*X) * LG(N,X,ALPHA,BETA)^2 DX 
%      =  GAMMA ( N + ALPHA + 1 )  / N!/ BETA^(ALPHA+1).
%
%Reference 
% Guo, Ben-yu and Zhang, Xiao-yong,
%  A new gernerlized Laguerre spectral approximation and its applications, 
%  Journal of Compuational and Applied Mathematics, 184, 2005, pp 382-403.
%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% weight index
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if ( alpha <= -1.0 )
    fprintf ( 1, '\n' );
    fprintf ( 1, 'GENERALIZED_LAGUERRE_POLYNOMIAL - Fatal error!\n' );
    fprintf ( 1, '  Illegal input value of ALPHA = %f\n', alpha );
    fprintf ( 1, '  But ALPHA must be greater than -1.\n' );
    error ( 'GENERALIZED_LAGUERRE_POLYNOMIAL - Fatal error!' );
  end
 
  if ( beta <= 0 )
    fprintf ( 1, '\n' );
    fprintf ( 1, 'GENERALIZED_LAGUERRE_POLYNOMIAL - Fatal error!\n' );
    fprintf ( 1, '  Illegal input value of BETA = %f\n', beta );
    fprintf ( 1, '  But BETA must be greater than 0.\n' );
    error ( 'GENERALIZED_LAGUERRE_POLYNOMIAL - Fatal error!' );
  end
  

%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% taking only vector value nodes
%%%%%%%%%%%%%%%%%%%%%%%%%%%


[N,M]=size(nodes_x);
if (N >1) && (M>1)
    error('Function Gen_laguerre_polynomial does not take matrix-valued nodes')
elseif N<=M
    nodes_x= nodes_x.';
   
end

mm=length(nodes_x);
nodes_x= nodes_x -shift;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ( order < 0 )    
    gen_laguerre_values = [];
    return
end

gen_laguerre_values = zeros(mm,order+1);
gen_laguerre_values(:,1) = 1.0;  
gen_laguerre_values(:,2) = -beta*nodes_x+ alpha+1;  

for ii= 2:order 
 gen_laguerre_values(:,ii+1) = ((2*ii-1+alpha-beta*nodes_x).*gen_laguerre_values(:,ii)-(ii-1+alpha)*gen_laguerre_values(:,ii-1)) /ii;          
end
